/*


From here on is not Fractyl's creation and is the hack script code.


*/
const _lastKnownHash = ``;
const _version = "V0.2"
if (btoa(document.body.querySelector("script").innerHTML) === _lastKnownHash) {
    save();

    let _usedHints = Number(localStorage.getItem("_hints")) ?? 0;

    const _elementsUnparsed = localStorage.getItem("gameSave");
    const _elements = JSON.parse(_elementsUnparsed);

    const _hackEls = [document.createElement("p"), document.createElement("button"), document.createElement("button"), document.createElement("button"), document.createElement("p"), document.createElement("p"),          document.createElement("br")];

    _hackEls[0].innerText = `Snail Elemental Hacks ${_version}:`;

    _hackEls[1].innerText = "Unlock all Elements";
    _hackEls[1].addEventListener("click", () => {
        _unlockAll();
    });

    _hackEls[2].innerText = "Reset collection";
    _hackEls[2].addEventListener("click", () => {
        _reset();
    });

    _hackEls[3].innerText = `Hint (${_usedHints} used)`;
    _hackEls[3].addEventListener("click", () => {
        _hackEls[4].innerText = _hint();
    });

    _hackEls[5].innerText = `Craftable Elements: Click to Refresh Craftable Elements!`;
    _hackEls[5].addEventListener("click", () => {
        _hackEls[5].innerText = `Craftable Elements:\n${_getCraftable().map(_el => _el.products.join(" and ")).join("\n")}`
    });

    _hackEls.forEach(_el => {
        document.body.append(document.createElement("br"), _el);
    });

    function _unlockAll() {
        Object.keys(_elements).forEach((_element) => {
            _elements[_element] = true;
        });

        localStorage.setItem("gameSave", JSON.stringify(_elements));

        load();
        window.scrollTo(0, document.body.scrollHeight);
    }

    function _reset() {
        Object.keys(_elements).forEach(_element => {
            _elements[_element] = false;
        });

        basicElements.forEach(_el => {
            _elements[_el] = true;
        });

        localStorage.setItem("gameSave", JSON.stringify(_elements));
        localStorage.setItem("_hints", 0);
        _usedHints = 0;
        _hackEls[3].innerText = `Hint (0 used)`;
        _hackEls[4].innerText = "";

        load();
    }

    function _getElBy(discovered = true) {
        const els = [];
        Object.keys(elements).forEach((el) => {
            if (elements[el].owned === discovered) {
                els.push(el);
            }
        });
        return els;
    }

    function _getCraftable() {
        const _undis = new Set(_getElBy(false));
        const _dis = new Set(_getElBy(true));

        const _craftable = formulae.filter((_el) => {
            if (_dis.has(_el.elements[0]) && _dis.has(_el.elements[1]) && _undis.has(_el.products[0])) {
                return _el;
            }
        });
        return _craftable;
    }

    function _hint() {
        const _els = _getCraftable();
        if (_els.length) {
            const _random = _els[Math.floor(Math.random() * _els.length)];

            const _string = _random["products"].join(" and ") + " = " + _random["elements"][0] + " + " + _random["elements"][1];

            ++_usedHints;
            localStorage.setItem("_hints", _usedHints);
            _hackEls[3].innerText = `Hint (${_usedHints} used)`;

            return _string;
        }
        else {
            return "You have discovered all elements!";
        }
    }
}
else {
    console.warn("Elemental Hacks refused to run, as they are outdated. Call the _showAdvanced function for details");
    function _showAdvanced() {
        console.log(`Elemental hacks ${_version}`);
        console.log(`=====================`);
        console.log(`Last known hash (version of Elemental): ${_lastKnownHash}`);
    }
}